# üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Qwen3 Code Assistant

from qwen3_code_assistant import Qwen3CodeAssistant
import time

def run_demo():
    print("üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø QWEN3 CODE ASSISTANT")
    print("=" * 50)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    assistant = Qwen3CodeAssistant(model_name="qwen3")

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    demos = [
        ("–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞", "–ù–∞–π–¥–∏ –ø—Ä–æ–±–ª–µ–º—ã –≤ —ç—Ç–æ–º –∫–æ–¥–µ", "def login(user, pwd): return user == 'admin'"),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞", "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞", ""),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤", "–ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–ª–æ–∂–µ–Ω–∏—è", "def add(a, b): return a + b"),
        ("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", "–°–æ–∑–¥–∞–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–ª–∞—Å—Å–∞", "class Calculator: pass"),
        ("–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥", "–£–ª—É—á—à–∏ —ç—Ç–æ—Ç –∫–æ–¥", "def process(data): result = []; [result.append(x*2) for x in data]; return result")
    ]

    for i, (title, query, code) in enumerate(demos, 1):
        print(f"\n{i}. {title}")
        print("-" * 30)
        print(f"–ó–∞–ø—Ä–æ—Å: {query}")

        if code:
            print(f"–ö–æ–¥: {code}")

        print("‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...")

        start = time.time()
        result = assistant.ask(query, code)
        elapsed = time.time() - start

        if 'error' not in result:
            print(f"‚úÖ –ì–æ—Ç–æ–≤–æ –∑–∞ {elapsed:.1f}—Å")
            print(f"üéØ –¢–∏–ø: {result.get('task_type', 'unknown')}")
            print(f"ü§ñ –ê–≥–µ–Ω—Ç: {result.get('agent_used', 'unknown')}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)
            for key in ['analysis', 'generated_code', 'tests', 'documentation', 'refactored_code']:
                if result.get(key):
                    content = result[key][:200] + "..." if len(result[key]) > 200 else result[key]
                    print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {content}")
                    break
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")

        if i < len(demos):
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def run_interactive():
    print("üéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú")
    assistant = Qwen3CodeAssistant()
    assistant.run_interactive()

def run_benchmark():
    print("‚ö° –ë–ï–ù–ß–ú–ê–†–ö –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    assistant = Qwen3CodeAssistant()

    queries = [
        "–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é",
        "–ù–∞–π–¥–∏ –±–∞–≥–∏ –≤ –∫–æ–¥–µ: def test(): pass",
        "–ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏"
    ]

    total_time = 0
    for i, query in enumerate(queries, 1):
        print(f"{i}. {query[:30]}...")
        start = time.time()
        result = assistant.ask(query)
        elapsed = time.time() - start
        total_time += elapsed

        status = "‚úÖ" if 'error' not in result else "‚ùå"
        print(f"   {status} {elapsed:.2f}—Å")

    print(f"\nüìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {total_time/len(queries):.2f}—Å")

if __name__ == "__main__":
    import sys

    if len(sys.argv) > 1:
        mode = sys.argv[1]
        if mode == "demo":
            run_demo()
        elif mode == "interactive":
            run_interactive()
        elif mode == "benchmark":
            run_benchmark()
    else:
        print("–†–µ–∂–∏–º—ã: demo, interactive, benchmark")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (demo): ") or "demo"

        if choice == "demo":
            run_demo()
        elif choice == "interactive":
            run_interactive()
        elif choice == "benchmark":
            run_benchmark()
        else:
            run_demo()
