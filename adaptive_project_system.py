
# üîÑ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –Ω–æ–≤—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º
# –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ–¥ –ª—é–±–æ–π –ø—Ä–æ–µ–∫—Ç

import os
import json
import yaml
from pathlib import Path
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
from abc import ABC, abstractmethod

@dataclass
class ProjectConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
    name: str
    language: str
    framework: str
    project_type: str
    dependencies: List[str]
    test_framework: Optional[str] = None
    build_tool: Optional[str] = None
    package_manager: Optional[str] = None
    linting_tools: List[str] = None

    def __post_init__(self):
        if self.linting_tools is None:
            self.linting_tools = []

class ProjectDetector(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤"""

    @abstractmethod
    def detect(self, project_path: str) -> Optional[ProjectConfig]:
        pass

    @abstractmethod
    def get_priority(self) -> int:
        """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ (–≤—ã—à–µ = –≤–∞–∂–Ω–µ–µ)"""
        pass

class PythonProjectDetector(ProjectDetector):
    """–î–µ—Ç–µ–∫—Ç–æ—Ä Python –ø—Ä–æ–µ–∫—Ç–æ–≤"""

    def detect(self, project_path: str) -> Optional[ProjectConfig]:
        path = Path(project_path)

        # –ü–æ–∏—Å–∫ Python —Ñ–∞–π–ª–æ–≤
        python_files = list(path.rglob("*.py"))
        if not python_files:
            return None

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        framework = self._detect_framework(path)
        project_type = self._detect_project_type(path, framework)
        dependencies = self._extract_dependencies(path)
        test_framework = self._detect_test_framework(path)
        build_tool = self._detect_build_tool(path)
        linting_tools = self._detect_linting_tools(path)

        return ProjectConfig(
            name=path.name,
            language="Python",
            framework=framework,
            project_type=project_type,
            dependencies=dependencies,
            test_framework=test_framework,
            build_tool=build_tool,
            package_manager="pip" if (path / "requirements.txt").exists() else "poetry" if (path / "pyproject.toml").exists() else "pip",
            linting_tools=linting_tools
        )

    def _detect_framework(self, path: Path) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Python —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
        # Django
        if (path / "manage.py").exists() or any(f.name == "settings.py" for f in path.rglob("settings.py")):
            return "Django"

        # Flask
        requirements_content = ""
        if (path / "requirements.txt").exists():
            requirements_content = (path / "requirements.txt").read_text()

        if "flask" in requirements_content.lower():
            return "Flask"

        # FastAPI
        if "fastapi" in requirements_content.lower():
            return "FastAPI"

        # Data Science
        if any(x in requirements_content.lower() for x in ["pandas", "numpy", "matplotlib", "jupyter"]):
            return "Data Science"

        # ML/AI
        if any(x in requirements_content.lower() for x in ["tensorflow", "pytorch", "scikit-learn"]):
            return "Machine Learning"

        return "Pure Python"

    def _detect_project_type(self, path: Path, framework: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        if framework in ["Django", "Flask", "FastAPI"]:
            return "Web Application"
        elif framework == "Data Science":
            return "Data Analysis"
        elif framework == "Machine Learning":
            return "ML/AI Project"
        elif any(f.name == "__main__.py" for f in path.rglob("__main__.py")):
            return "CLI Application"
        elif any(f.name == "setup.py" for f in path.rglob("setup.py")):
            return "Python Package"
        else:
            return "General Purpose"

    def _extract_dependencies(self, path: Path) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        dependencies = []

        if (path / "requirements.txt").exists():
            content = (path / "requirements.txt").read_text()
            for line in content.split("\n"):
                if line.strip() and not line.startswith("#"):
                    dep = line.split("==")[0].split(">=")[0].split("~=")[0].strip()
                    dependencies.append(dep)

        return dependencies[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

    def _detect_test_framework(self, path: Path) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
        if any(f.name.startswith("test_") for f in path.rglob("test_*.py")):
            return "pytest"
        elif any(f.name.endswith("_test.py") for f in path.rglob("*_test.py")):
            return "unittest"
        elif any("tests" in str(f) for f in path.rglob("*.py")):
            return "pytest"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return None

    def _detect_build_tool(self, path: Path) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å–±–æ—Ä–∫–∏"""
        if (path / "pyproject.toml").exists():
            return "poetry"
        elif (path / "setup.py").exists():
            return "setuptools"
        elif (path / "Pipfile").exists():
            return "pipenv"
        return None

    def _detect_linting_tools(self, path: Path) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ª–∏–Ω—Ç–∏–Ω–≥–∞"""
        tools = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if (path / ".pylintrc").exists() or (path / "pylint.cfg").exists():
            tools.append("pylint")
        if (path / ".flake8").exists() or (path / "setup.cfg").exists():
            tools.append("flake8")
        if (path / "pyproject.toml").exists():
            content = (path / "pyproject.toml").read_text()
            if "black" in content:
                tools.append("black")
            if "mypy" in content:
                tools.append("mypy")

        return tools

    def get_priority(self) -> int:
        return 100

class JavaScriptProjectDetector(ProjectDetector):
    """–î–µ—Ç–µ–∫—Ç–æ—Ä JavaScript/TypeScript –ø—Ä–æ–µ–∫—Ç–æ–≤"""

    def detect(self, project_path: str) -> Optional[ProjectConfig]:
        path = Path(project_path)

        # –ü–æ–∏—Å–∫ package.json
        package_json_path = path / "package.json"
        if not package_json_path.exists():
            return None

        try:
            with open(package_json_path, 'r', encoding='utf-8') as f:
                package_data = json.load(f)
        except:
            return None

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
        language = "TypeScript" if (path / "tsconfig.json").exists() else "JavaScript"

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
        framework = self._detect_js_framework(package_data, path)
        project_type = self._detect_js_project_type(package_data, framework)
        test_framework = self._detect_js_test_framework(package_data)
        build_tool = self._detect_js_build_tool(package_data, path)

        dependencies = list(package_data.get("dependencies", {}).keys())[:15]

        return ProjectConfig(
            name=package_data.get("name", path.name),
            language=language,
            framework=framework,
            project_type=project_type,
            dependencies=dependencies,
            test_framework=test_framework,
            build_tool=build_tool,
            package_manager="npm" if (path / "package-lock.json").exists() else "yarn" if (path / "yarn.lock").exists() else "npm",
            linting_tools=self._detect_js_linting_tools(package_data, path)
        )

    def _detect_js_framework(self, package_data: Dict, path: Path) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ JavaScript —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
        deps = {**package_data.get("dependencies", {}), **package_data.get("devDependencies", {})}

        if "react" in deps:
            if "next" in deps:
                return "Next.js"
            elif "gatsby" in deps:
                return "Gatsby"
            else:
                return "React"
        elif "vue" in deps:
            if "nuxt" in deps:
                return "Nuxt.js"
            else:
                return "Vue.js"
        elif "angular" in deps or "@angular/core" in deps:
            return "Angular"
        elif "express" in deps:
            return "Express.js"
        elif "svelte" in deps:
            return "Svelte"
        elif "solid-js" in deps:
            return "SolidJS"

        return "Vanilla JavaScript"

    def _detect_js_project_type(self, package_data: Dict, framework: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ JavaScript –ø—Ä–æ–µ–∫—Ç–∞"""
        if framework in ["React", "Vue.js", "Angular", "Next.js", "Nuxt.js", "Gatsby", "Svelte", "SolidJS"]:
            return "Frontend Application"
        elif framework == "Express.js":
            return "Backend API"
        elif "electron" in package_data.get("dependencies", {}):
            return "Desktop Application"
        elif package_data.get("type") == "module":
            return "ES Module"
        else:
            return "Node.js Application"

    def _detect_js_test_framework(self, package_data: Dict) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
        deps = {**package_data.get("dependencies", {}), **package_data.get("devDependencies", {})}

        if "jest" in deps:
            return "Jest"
        elif "mocha" in deps:
            return "Mocha"
        elif "vitest" in deps:
            return "Vitest"
        elif "cypress" in deps:
            return "Cypress"
        elif "playwright" in deps:
            return "Playwright"

        return None

    def _detect_js_build_tool(self, package_data: Dict, path: Path) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å–±–æ—Ä–∫–∏"""
        deps = {**package_data.get("dependencies", {}), **package_data.get("devDependencies", {})}

        if (path / "webpack.config.js").exists() or "webpack" in deps:
            return "Webpack"
        elif (path / "vite.config.js").exists() or (path / "vite.config.ts").exists():
            return "Vite"
        elif (path / "rollup.config.js").exists():
            return "Rollup"
        elif "parcel" in deps:
            return "Parcel"

        return None

    def _detect_js_linting_tools(self, package_data: Dict, path: Path) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–Ω—Ç–∏–Ω–≥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        tools = []
        deps = {**package_data.get("dependencies", {}), **package_data.get("devDependencies", {})}

        if "eslint" in deps or (path / ".eslintrc.js").exists():
            tools.append("ESLint")
        if "prettier" in deps or (path / ".prettierrc").exists():
            tools.append("Prettier")
        if "typescript" in deps:
            tools.append("TypeScript")

        return tools

    def get_priority(self) -> int:
        return 95

class JavaProjectDetector(ProjectDetector):
    """–î–µ—Ç–µ–∫—Ç–æ—Ä Java –ø—Ä–æ–µ–∫—Ç–æ–≤"""

    def detect(self, project_path: str) -> Optional[ProjectConfig]:
        path = Path(project_path)

        # –ü–æ–∏—Å–∫ Java —Ñ–∞–π–ª–æ–≤
        java_files = list(path.rglob("*.java"))
        if not java_files:
            return None

        framework = self._detect_java_framework(path)
        project_type = self._detect_java_project_type(path, framework)
        build_tool = self._detect_java_build_tool(path)
        test_framework = self._detect_java_test_framework(path)

        return ProjectConfig(
            name=path.name,
            language="Java",
            framework=framework,
            project_type=project_type,
            dependencies=self._extract_java_dependencies(path, build_tool),
            test_framework=test_framework,
            build_tool=build_tool,
            package_manager=build_tool,
            linting_tools=self._detect_java_linting_tools(path)
        )

    def _detect_java_framework(self, path: Path) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Java —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
        # Spring Boot
        if any("spring-boot" in str(f) for f in path.rglob("*.xml")) or any("@SpringBootApplication" in f.read_text(errors='ignore') for f in path.rglob("*.java")):
            return "Spring Boot"

        # Spring
        if any("spring" in str(f).lower() for f in path.rglob("*.xml")):
            return "Spring"

        # Android
        if (path / "AndroidManifest.xml").exists():
            return "Android"

        return "Core Java"

    def _detect_java_project_type(self, path: Path, framework: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ Java –ø—Ä–æ–µ–∫—Ç–∞"""
        if framework == "Spring Boot":
            return "Web Application"
        elif framework == "Android":
            return "Mobile Application"
        elif any("junit" in str(f).lower() for f in path.rglob("*.xml")):
            return "Library/Framework"
        else:
            return "Console Application"

    def _detect_java_build_tool(self, path: Path) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Å–±–æ—Ä–∫–∏"""
        if (path / "pom.xml").exists():
            return "Maven"
        elif (path / "build.gradle").exists() or (path / "build.gradle.kts").exists():
            return "Gradle"
        elif (path / "build.xml").exists():
            return "Ant"
        return None

    def _detect_java_test_framework(self, path: Path) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞"""
        # –ü–æ–∏—Å–∫ –≤ build —Ñ–∞–π–ª–∞—Ö –∏–ª–∏ Java –∫–ª–∞—Å—Å–∞—Ö
        for file in path.rglob("*.xml"):
            try:
                content = file.read_text(errors='ignore').lower()
                if "junit" in content:
                    return "JUnit"
                elif "testng" in content:
                    return "TestNG"
            except:
                continue

        for file in path.rglob("*.java"):
            try:
                content = file.read_text(errors='ignore')
                if "@Test" in content:
                    return "JUnit" if "import org.junit" in content else "TestNG"
            except:
                continue

        return None

    def _extract_java_dependencies(self, path: Path, build_tool: Optional[str]) -> List[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Java –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        dependencies = []

        if build_tool == "Maven" and (path / "pom.xml").exists():
            # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ Maven POM
            try:
                content = (path / "pom.xml").read_text()
                # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ –≤ pom.xml
                if "spring-boot" in content:
                    dependencies.append("Spring Boot")
                if "junit" in content:
                    dependencies.append("JUnit")
                if "hibernate" in content:
                    dependencies.append("Hibernate")
            except:
                pass

        return dependencies

    def _detect_java_linting_tools(self, path: Path) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Java –ª–∏–Ω—Ç–∏–Ω–≥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        tools = []

        if (path / "checkstyle.xml").exists():
            tools.append("Checkstyle")
        if (path / "spotbugs.xml").exists():
            tools.append("SpotBugs")
        if (path / "pmd.xml").exists():
            tools.append("PMD")

        return tools

    def get_priority(self) -> int:
        return 90

# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤...

class ProjectAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞"""

    def __init__(self):
        self.detectors: List[ProjectDetector] = [
            PythonProjectDetector(),
            JavaScriptProjectDetector(),
            JavaProjectDetector(),
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
        ]
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        self.detectors.sort(key=lambda x: x.get_priority(), reverse=True)

    def analyze_project(self, project_path: str) -> Optional[ProjectConfig]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        for detector in self.detectors:
            try:
                config = detector.detect(project_path)
                if config:
                    return config
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –¥–µ—Ç–µ–∫—Ç–æ—Ä–µ {detector.__class__.__name__}: {e}")

        return None

    def generate_ai_config(self, project_config: ProjectConfig) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–µ–∫—Ç–∞"""

        base_config = {
            "project": {
                "name": project_config.name,
                "language": project_config.language,
                "framework": project_config.framework,
                "type": project_config.project_type
            },
            "agents": self._configure_agents(project_config),
            "llm": self._configure_llm(project_config),
            "vector_db": self._configure_vector_db(project_config),
            "analysis": self._configure_analysis(project_config)
        }

        return base_config

    def _configure_agents(self, config: ProjectConfig) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–¥ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞"""
        agents = {
            "supervisor": {
                "model": "qwen2.5-coder:7b",
                "prompt_template": f"–í—ã –≤–µ–¥—É—â–∏–π AI –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–ª—è {config.framework} –ø—Ä–æ–µ–∫—Ç–æ–≤..."
            },
            "code_analyzer": {
                "specialization": f"{config.language} {config.framework} analysis",
                "tools": self._get_analysis_tools(config)
            },
            "code_generator": {
                "specialization": f"{config.language} {config.framework} development",
                "style_guide": self._get_style_guide(config)
            }
        }

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        if config.project_type == "Web Application":
            agents["api_expert"] = {
                "specialization": "REST API design and testing",
                "tools": ["swagger_analyzer", "api_tester"]
            }
        elif config.project_type == "Data Analysis":
            agents["data_expert"] = {
                "specialization": "Data analysis and visualization",
                "tools": ["pandas_analyzer", "plot_generator"]
            }

        return agents

    def _get_analysis_tools(self, config: ProjectConfig) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —è–∑—ã–∫–∞"""
        tools = ["ast_parser", "dependency_analyzer"]

        if config.language == "Python":
            tools.extend(["pylint_integration", "mypy_checker"])
        elif config.language == "JavaScript":
            tools.extend(["eslint_integration", "typescript_checker"])
        elif config.language == "Java":
            tools.extend(["checkstyle_integration", "spotbugs_analyzer"])

        return tools

    def _get_style_guide(self, config: ProjectConfig) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –ø–æ —Å—Ç–∏–ª—é"""
        style_guides = {
            "Python": {
                "Django": "Django coding style with PEP 8",
                "Flask": "Flask best practices with PEP 8",
                "Data Science": "Data science conventions with type hints"
            },
            "JavaScript": {
                "React": "React + ESLint + Prettier standards",
                "Vue.js": "Vue.js style guide + ESLint",
                "Node.js": "Node.js best practices + ESLint"
            },
            "Java": {
                "Spring Boot": "Spring Boot conventions + Google Java Style",
                "Android": "Android development guidelines"
            }
        }

        return {
            "language": config.language,
            "framework_specific": style_guides.get(config.language, {}).get(config.framework, "Standard conventions")
        }

    def _configure_llm(self, config: ProjectConfig) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ LLM –ø–æ–¥ –ø—Ä–æ–µ–∫—Ç"""
        llm_config = {
            "provider": "ollama",
            "models": {
                "primary": "qwen2.5-coder:7b",
                "specialized": []
            }
        }

        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
        if config.project_type == "Web Application":
            llm_config["models"]["specialized"].append("codellama:7b")  # –î–ª—è API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        elif config.project_type == "Data Analysis":
            llm_config["models"]["specialized"].append("deepseek-coder")  # –î–ª—è data science

        return llm_config

    def _configure_vector_db(self, config: ProjectConfig) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞"""
        # –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        estimated_size = len(config.dependencies) * 50  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞

        if estimated_size < 1000:
            return {
                "type": "chromadb",
                "config": {"persist_directory": f"./embeddings/{config.name}"}
            }
        else:
            return {
                "type": "qdrant",
                "config": {
                    "host": "localhost",
                    "port": 6333,
                    "collection_name": f"{config.name}_code"
                }
            }

    def _configure_analysis(self, config: ProjectConfig) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞ –ø–æ–¥ —è–∑—ã–∫"""
        analysis_config = {
            "chunking": {
                "max_size": 500,
                "overlap": 50,
                "respect_boundaries": True
            },
            "languages": [config.language.lower()],
            "exclude_patterns": [
                ".git/**", "node_modules/**", "__pycache__/**",
                "*.pyc", "*.class", "target/**", "build/**"
            ]
        }

        # –Ø–∑—ã–∫–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if config.language == "Python":
            analysis_config["include_patterns"] = ["*.py"]
            analysis_config["extract_docstrings"] = True
        elif config.language == "JavaScript":
            analysis_config["include_patterns"] = ["*.js", "*.ts", "*.jsx", "*.tsx"]
            analysis_config["extract_jsdoc"] = True
        elif config.language == "Java":
            analysis_config["include_patterns"] = ["*.java"]
            analysis_config["extract_javadoc"] = True

        return analysis_config

class AdaptiveSystemManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""

    def __init__(self):
        self.analyzer = ProjectAnalyzer()
        self.current_config: Optional[ProjectConfig] = None
        self.config_cache = {}

    def adapt_to_project(self, project_path: str) -> Dict[str, Any]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –Ω–æ–≤–æ–º—É –ø—Ä–æ–µ–∫—Ç—É"""
        print(f"üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞: {project_path}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        project_hash = self._get_project_hash(project_path)
        if project_hash in self.config_cache:
            print("üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return self.config_cache[project_hash]

        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
        project_config = self.analyzer.analyze_project(project_path)

        if not project_config:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞")
            return self._get_default_config()

        print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ–µ–∫—Ç: {project_config.language} {project_config.framework}")
        print(f"üìä –¢–∏–ø: {project_config.project_type}")
        print(f"üîß –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {len(project_config.dependencies)} –±–∏–±–ª–∏–æ—Ç–µ–∫")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        ai_config = self.analyzer.generate_ai_config(project_config)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
        self.config_cache[project_hash] = ai_config
        self.current_config = project_config

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self._save_project_config(project_path, ai_config)

        return ai_config

    def _get_project_hash(self, project_path: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import hashlib

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º mtime –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        key_files = [
            "package.json", "requirements.txt", "pom.xml", 
            "Cargo.toml", "go.mod", "composer.json"
        ]

        file_info = []
        for file_name in key_files:
            file_path = Path(project_path) / file_name
            if file_path.exists():
                file_info.append(f"{file_name}:{file_path.stat().st_mtime}")

        hash_string = f"{project_path}:{'|'.join(file_info)}"
        return hashlib.md5(hash_string.encode()).hexdigest()

    def _save_project_config(self, project_path: str, config: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        config_path = Path(project_path) / ".ai_assistant" / "config.yaml"
        config_path.parent.mkdir(exist_ok=True)

        with open(config_path, 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False, allow_unicode=True)

        print(f"üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {config_path}")

    def _get_default_config(self) -> Dict[str, Any]:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "project": {
                "name": "Unknown",
                "language": "Mixed",
                "framework": "Unknown",
                "type": "General"
            },
            "agents": {
                "supervisor": {"model": "qwen2.5-coder:7b"},
                "code_analyzer": {"specialization": "General code analysis"},
                "code_generator": {"specialization": "Multi-language code generation"}
            },
            "llm": {"provider": "ollama", "model": "qwen2.5-coder:7b"},
            "vector_db": {"type": "chromadb"},
            "analysis": {"languages": ["python", "javascript", "java"]}
        }

    def get_project_specific_prompts(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        if not self.current_config:
            return {}

        prompts = {
            "supervisor": f"""
            –í—ã - –≤–µ–¥—É—â–∏–π AI –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –¥–ª—è {self.current_config.framework} –ø—Ä–æ–µ–∫—Ç–æ–≤.
            –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {self.current_config.project_type} –Ω–∞ {self.current_config.language}.

            –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:
            - code_analyzer: –∞–Ω–∞–ª–∏–∑ {self.current_config.language} –∫–æ–¥–∞
            - code_generator: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è {self.current_config.framework} –∫–æ–¥–∞
            - test_specialist: —Å–æ–∑–¥–∞–Ω–∏–µ {self.current_config.test_framework or '–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö'} —Ç–µ—Å—Ç–æ–≤

            –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ {self.current_config.framework} –ø—Ä–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á.
            """,

            "code_analyzer": f"""
            –í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É {self.current_config.language} –∫–æ–¥–∞ –∏ {self.current_config.framework} –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ.

            –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:
            - –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ {self.current_config.framework}
            - –ü—Ä–æ–≤–µ—Ä–∫–∞ best practices –¥–ª—è {self.current_config.project_type}
            - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ anti-patterns –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–ª–≥–∞

            –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(self.current_config.linting_tools)}
            """,

            "code_generator": f"""
            –í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ {self.current_config.language} –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ {self.current_config.framework}.

            –°–ª–µ–¥—É–π—Ç–µ –∫–æ–Ω–≤–µ–Ω—Ü–∏—è–º:
            - {self.current_config.language} coding standards
            - {self.current_config.framework} best practices
            - –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {self.current_config.project_type}

            –ì–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–¥, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å: {', '.join(self.current_config.dependencies[:5])}
            """
        }

        return prompts

# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° VISUAL STUDIO

class VisualStudioIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Visual Studio —á–µ—Ä–µ–∑ Language Server Protocol"""

    def __init__(self, adaptive_manager: AdaptiveSystemManager):
        self.adaptive_manager = adaptive_manager
        self.lsp_config = {}

    def create_vs_extension_config(self, project_path: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Visual Studio Extension"""

        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –ø—Ä–æ–µ–∫—Ç—É
        ai_config = self.adaptive_manager.adapt_to_project(project_path)

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LSP —Å–µ—Ä–≤–µ—Ä–∞
        lsp_config = {
            "name": "AI Code Assistant",
            "displayName": "AI Code Assistant for " + ai_config["project"]["framework"],
            "description": f"Intelligent assistant for {ai_config['project']['language']} {ai_config['project']['framework']} projects",
            "version": "1.0.0",
            "engines": {
                "vscode": "^1.74.0"
            },
            "categories": ["Other", "Machine Learning"],
            "activationEvents": [
                f"onLanguage:{ai_config['project']['language'].lower()}",
                "onCommand:ai-assistant.analyze",
                "onCommand:ai-assistant.generate"
            ],
            "main": "./out/extension.js",
            "contributes": {
                "commands": [
                    {
                        "command": "ai-assistant.analyze",
                        "title": "Analyze Code",
                        "category": "AI Assistant"
                    },
                    {
                        "command": "ai-assistant.generate", 
                        "title": "Generate Code",
                        "category": "AI Assistant"
                    },
                    {
                        "command": "ai-assistant.explain",
                        "title": "Explain Code",
                        "category": "AI Assistant"
                    }
                ],
                "configuration": {
                    "title": "AI Code Assistant",
                    "properties": {
                        "aiAssistant.model": {
                            "type": "string",
                            "default": ai_config["llm"]["model"],
                            "description": "LLM model to use"
                        },
                        "aiAssistant.projectType": {
                            "type": "string",
                            "default": ai_config["project"]["type"],
                            "description": "Project type for optimization"
                        }
                    }
                }
            }
        }

        return lsp_config

    def generate_lsp_ai_config(self, project_config: Dict[str, Any]) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è LSP-AI"""

        return {
            "initializationOptions": {
                "memory": {
                    "file_store": {}
                },
                "models": {
                    "completion_model": {
                        "type": "ollama",
                        "model": project_config["llm"]["model"],
                        "url": "http://localhost:11434",
                        "auth_token": None
                    },
                    "chat_model": {
                        "type": "ollama", 
                        "model": project_config["llm"]["model"],
                        "url": "http://localhost:11434",
                        "auth_token": None
                    }
                },
                "completion": {
                    "model": "completion_model",
                    "parameters": {
                        "max_context": 1024,
                        "max_tokens": 64
                    }
                },
                "chat": {
                    "model": "chat_model",
                    "parameters": {
                        "max_context": 4096,
                        "max_tokens": 512
                    }
                }
            }
        }

# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ò –ù–ê–°–¢–†–û–ô–ö–ê

def auto_setup_project(project_path: str) -> str:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""

    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ AI –ø–æ–º–æ—â–Ω–∏–∫–∞...")

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    adaptive_manager = AdaptiveSystemManager()

    # –ê–Ω–∞–ª–∏–∑ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è
    config = adaptive_manager.adapt_to_project(project_path)

    # –°–æ–∑–¥–∞–Ω–∏–µ Visual Studio –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    vs_integration = VisualStudioIntegration(adaptive_manager)
    vs_config = vs_integration.create_vs_extension_config(project_path)
    lsp_config = vs_integration.generate_lsp_ai_config(config)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
    config_dir = Path(project_path) / ".ai_assistant"
    config_dir.mkdir(exist_ok=True)

    # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    with open(config_dir / "ai_config.yaml", 'w', encoding='utf-8') as f:
        yaml.dump(config, f, default_flow_style=False, allow_unicode=True)

    # LSP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    with open(config_dir / "lsp_config.json", 'w', encoding='utf-8') as f:
        json.dump(lsp_config, f, indent=2, ensure_ascii=False)

    # VS Code –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    with open(config_dir / "vscode_extension.json", 'w', encoding='utf-8') as f:
        json.dump(vs_config, f, indent=2, ensure_ascii=False)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    launch_script = f"""#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ AI –ø–æ–º–æ—â–Ω–∏–∫–∞

echo "üöÄ –ó–∞–ø—É—Å–∫ AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è {config['project']['name']}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama
if ! command -v ollama &> /dev/null; then
    echo "‚ùå Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: curl -fsSL https://ollama.com/install.sh | sh"
    exit 1
fi

# –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏
echo "ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ {config['llm']['model']}..."
ollama pull {config['llm']['model']}

# –ó–∞–ø—É—Å–∫ LSP-AI —Å–µ—Ä–≤–µ—Ä–∞
echo "üîå –ó–∞–ø—É—Å–∫ LSP-AI —Å–µ—Ä–≤–µ—Ä–∞..."
lsp-ai --config .ai_assistant/lsp_config.json

echo "‚úÖ AI –ø–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
"""

    with open(config_dir / "launch.sh", 'w', encoding='utf-8') as f:
        f.write(launch_script)

    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod(config_dir / "launch.sh", 0o755)

    summary = f"""
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ–µ–∫—Ç:
  üìù –Ø–∑—ã–∫: {config['project']['language']}
  üõ†Ô∏è –§—Ä–µ–π–º–≤–æ—Ä–∫: {config['project']['framework']}  
  üìä –¢–∏–ø: {config['project']['type']}
  üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {len(config.get('project', {}).get('dependencies', []))} —à—Ç.

–°–æ–∑–¥–∞–Ω–æ:
  üìÑ ai_config.yaml - –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  üîå lsp_config.json - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LSP-AI
  üé® vscode_extension.json - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VS Code
  üöÄ launch.sh - —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞

–î–ª—è –∑–∞–ø—É—Å–∫–∞: cd {project_path}/.ai_assistant && ./launch.sh
"""

    return summary

# –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
if __name__ == "__main__":
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    result = auto_setup_project("./")
    print(result)
