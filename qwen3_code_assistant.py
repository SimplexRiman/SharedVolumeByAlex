
# üöÄ Advanced Code Assistant with Qwen3 200B+ & LangGraph
# –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ—â–Ω–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏

import asyncio
import json
import os
from typing import Dict, List, Any, Optional, TypedDict, Annotated
from pathlib import Path
import ast
from datetime import datetime

# –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–º–ø–æ—Ä—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
# from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
# from langchain_core.prompts import ChatPromptTemplate
# from langchain_ollama import ChatOllama
# from langchain.tools import Tool
# from langchain.schema import Document
# from langchain.text_splitter import RecursiveCharacterTextSplitter
# from langchain.memory import ConversationBufferWindowMemory
# from langchain.vectorstores import Chroma
# from langchain.embeddings import SentenceTransformerEmbeddings
# from langgraph.graph import StateGraph, END, START
# from langgraph.prebuilt import ToolExecutor
# from langgraph.checkpoint.memory import MemorySaver

import subprocess
import tempfile
import re

class CodeAssistantState(TypedDict):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–¥–∞-–ø–æ–º–æ—â–Ω–∏–∫–∞"""
    query: str
    code_context: str
    analysis_result: str
    generated_code: str
    test_code: str
    documentation: str
    refactored_code: str
    conversation_history: List[Dict]
    current_agent: str
    task_type: str
    language: str
    project_files: List[str]
    error_feedback: str

class Qwen3CodeAssistant:
    """
    –ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏ –≤ –∫–æ–¥–µ –Ω–∞ –±–∞–∑–µ Qwen3 200B+

    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
    - Supervisor Agent: –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    - Code Analyzer: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥, –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã
    - Code Generator: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–æ–¥ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    - Test Generator: –°–æ–∑–¥–∞–µ—Ç unit —Ç–µ—Å—Ç—ã –∏ integration —Ç–µ—Å—Ç—ã  
    - Documentation Agent: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    - Refactoring Agent: –£–ª—É—á—à–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    - RAG System: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    """

    def __init__(self, 
                 model_name: str = "qwen3",  # –í–∞—à–∞ –º–æ–¥–µ–ª—å –±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞
                 ollama_base_url: str = "http://localhost:11434"):

        self.model_name = model_name
        self.ollama_base_url = ollama_base_url

        print(f"üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Qwen3 Code Assistant...")
        print(f"üì° –ú–æ–¥–µ–ª—å: {model_name}")
        print(f"üîó Ollama URL: {ollama_base_url}")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Qwen3 (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
        self.qwen3_config = {
            "temperature": 0.7,       # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è Qwen3
            "top_p": 0.8,             # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            "top_k": 20,              # –§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞ –ª—É—á—à–∏—Ö —Ç–æ–∫–µ–Ω–∞—Ö
            "repeat_penalty": 1.05,   # –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            "num_ctx": 32768,         # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            "num_gpu": 1,             # GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ
            "num_thread": 8,          # CPU –ø–æ—Ç–æ–∫–∏
        }

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–∑–¥–µ—Å—å –ø–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
        self._setup_agents()
        self._setup_workflow()

        print("‚úÖ Qwen3 Code Assistant –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    def _setup_agents(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""

        # Supervisor Agent - –ì–ª–∞–≤–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä  
        self.supervisor_prompt = """
–¢—ã - –≤–µ–¥—É—â–∏–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è, –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—â–∏–π –∫–æ–º–∞–Ω–¥—É AI –∞–≥–µ–Ω—Ç–æ–≤.

–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç—ã:
üîç **Code Analyzer** - –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞, –ø–æ–∏—Å–∫ –±–∞–≥–æ–≤, code review
üíª **Code Generator** - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞, —Ñ—É–Ω–∫—Ü–∏–π, –∫–ª–∞—Å—Å–æ–≤
üß™ **Test Generator** - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ (unit, integration)
üìö **Documentation Agent** - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
üîß **Refactoring Agent** - —É–ª—É—á—à–µ–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞

–ó–∞–ø—Ä–æ—Å: {query}
–ö–æ–¥: {code_context}

–û–ø—Ä–µ–¥–µ–ª–∏:
1. TASK_TYPE: [analysis/generation/testing/documentation/refactoring]
2. AGENT: [analyzer/generator/tester/documenter/refactorer] 
3. REASONING: [–ø–æ—á–µ–º—É –≤—ã–±—Ä–∞–Ω —ç—Ç–æ—Ç –∞–≥–µ–Ω—Ç]
"""

        # Code Analyzer Agent
        self.analyzer_prompt = """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–¥–∞ —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫.

–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
```{language}
{code_context}
```

–ó–∞–¥–∞—á–∞: {query}

–ü—Ä–æ–≤–µ–¥–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
1. ‚úÖ **–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å** - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏  
2. ‚ö° **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** - —É–∑–∫–∏–µ –º–µ—Å—Ç–∞, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
3. üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
4. üìñ **–ß–∏—Ç–∞–µ–º–æ—Å—Ç—å** - —Å—Ç–∏–ª—å, –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
5. üèóÔ∏è **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞** - SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã, –ø–∞—Ç—Ç–µ—Ä–Ω—ã
6. üß™ **–¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å** - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–î–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º –∫–æ–¥–∞.
"""

        # Code Generator Agent
        self.generator_prompt = """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ, production-ready –∫–æ–¥–∞.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: {query}
–Ø–∑—ã–∫: {language}
–ö–æ–Ω—Ç–µ–∫—Å—Ç: {code_context}

–ü—Ä–∏–Ω—Ü–∏–ø—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
‚úÖ –ß–∏—Å—Ç—ã–π, —á–∏—Ç–∞–µ–º—ã–π –∫–æ–¥
‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º ({language} –∫–æ–Ω–≤–µ–Ω—Ü–∏–∏)
‚úÖ –ü–æ–¥—Ä–æ–±–Ω—ã–µ docstrings/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
‚úÖ –¢–∏–ø–∏–∑–∞—Ü–∏—è (type hints)
‚úÖ –ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
1. üìã –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è
2. üíª –ü–æ–ª–Ω—ã–π –∫–æ–¥ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏  
3. üìñ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
4. üß™ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
"""

        # Test Generator Agent
        self.tester_prompt = """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ü–û.

–ö–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
```{language}
{code_context}
```

–ó–∞–¥–∞—á–∞: {query}

–°–æ–∑–¥–∞–π –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤:
1. üß™ **Unit —Ç–µ—Å—Ç—ã** - –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏/–º–µ—Ç–æ–¥—ã
2. üîó **Integration —Ç–µ—Å—Ç—ã** - –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
3. üéØ **Edge cases** - –≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏ –æ—à–∏–±–∫–∏
4. ‚ö° **Performance —Ç–µ—Å—Ç—ã** - –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

–î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞:
- –û–ø–∏—Å–∞–Ω–∏–µ —á—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è
- Setup/teardown –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
- Clear assertions —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
- –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏

–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ (pytest/Jest/JUnit).
"""

        # Documentation Agent
        self.documenter_prompt = """
–¢—ã - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–¥–∞.

–ö–æ–¥ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
```{language}
{code_context}
```

–ó–∞–¥–∞—á–∞: {query}

–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é:
1. üìö **API Documentation** - —Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã, –º–µ—Ç–æ–¥—ã
2. üìñ **Usage Examples** - –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
3. üèóÔ∏è **Architecture Overview** - –æ–±—â–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
4. üõ†Ô∏è **Setup Instructions** - —É—Å—Ç–∞–Ω–æ–≤–∫–∞/–Ω–∞—Å—Ç—Ä–æ–π–∫–∞
5. üîß **Troubleshooting** - —á–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è

–î–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å–∞:
- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —Ç–∏–ø–∞–º–∏
- –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è  
- –í–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
- –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑—É–π Markdown —Ñ–æ—Ä–º–∞—Ç.
"""

        # Refactoring Agent
        self.refactorer_prompt = """
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É —Å –≥–ª—É–±–æ–∫–∏–º –∑–Ω–∞–Ω–∏–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:
```{language}
{code_context}
```

–¶–µ–ª—å: {query}

–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏—è:
1. ü¶® **Code Smells** - —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ "–¥—É—Ä–Ω–æ –ø–∞—Ö–Ω—É—â–µ–≥–æ" –∫–æ–¥–∞
2. üîÑ **DRY Principle** - —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
3. üèóÔ∏è **SOLID Principles** - —É–ª—É—á—à–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
4. ‚ö° **Performance** - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
5. üìñ **Readability** - —É–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
6. üîß **Maintainability** - —É–ø—Ä–æ—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–∏:
- –ß—Ç–æ —É–ª—É—á—à–∞–µ—Ç—Å—è –∏ –ø–æ—á–µ–º—É
- –ö–∞–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–¥
- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π –∫–æ–¥ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.
"""

        print("‚úÖ –ü—Ä–æ–º–ø—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    def _setup_workflow(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ workflow (–±–µ–∑ LangGraph –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)"""

        self.agents = {
            "supervisor": self._supervisor_logic,
            "analyzer": self._analyzer_logic,
            "generator": self._generator_logic,
            "tester": self._tester_logic,
            "documenter": self._documenter_logic,
            "refactorer": self._refactorer_logic,
        }

        print("‚úÖ Workflow –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

    def _make_ollama_request(self, prompt: str, system_prompt: str = "", temperature: float = None) -> str:
        """–ó–∞–ø—Ä–æ—Å –∫ Ollama —á–µ—Ä–µ–∑ API"""

        import requests

        temp = temperature if temperature is not None else self.qwen3_config["temperature"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ Ollama API
        payload = {
            "model": self.model_name,
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            "stream": False,
            "options": {
                "temperature": temp,
                "top_p": self.qwen3_config["top_p"],
                "top_k": self.qwen3_config["top_k"],
                "repeat_penalty": self.qwen3_config["repeat_penalty"],
                "num_ctx": self.qwen3_config["num_ctx"]
            }
        }

        try:
            response = requests.post(
                f"{self.ollama_base_url}/api/chat",
                json=payload,
                headers={"Content-Type": "application/json"},
                timeout=300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            )

            if response.status_code == 200:
                result = response.json()
                return result["message"]["content"]
            else:
                return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}"

        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Ollama: {e}"

    def _supervisor_logic(self, state: CodeAssistantState) -> CodeAssistantState:
        """–õ–æ–≥–∏–∫–∞ —Å—É–ø–µ—Ä–≤–∏–∑–æ—Ä–∞"""

        prompt = self.supervisor_prompt.format(
            query=state["query"],
            code_context=state["code_context"]
        )

        response = self._make_ollama_request(
            prompt, 
            "–¢—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä AI –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏.",
            temperature=0.3  # –ú–µ–Ω—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        )

        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
        task_type = self._extract_field(response, "TASK_TYPE") or "analysis"
        agent = self._extract_field(response, "AGENT") or "analyzer"
        reasoning = self._extract_field(response, "REASONING")

        state["task_type"] = task_type
        state["current_agent"] = agent
        state["conversation_history"].append({
            "role": "supervisor",
            "content": f"–ó–∞–¥–∞—á–∞: {task_type}, –ê–≥–µ–Ω—Ç: {agent}",
            "reasoning": reasoning,
            "timestamp": datetime.now().isoformat()
        })

        print(f"üéØ –°—É–ø–µ—Ä–≤–∏–∑–æ—Ä -> –ó–∞–¥–∞—á–∞: {task_type} | –ê–≥–µ–Ω—Ç: {agent}")
        return state

    def _analyzer_logic(self, state: CodeAssistantState) -> CodeAssistantState:
        """–õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""

        prompt = self.analyzer_prompt.format(
            query=state["query"],
            code_context=state["code_context"],
            language=state["language"]
        )

        response = self._make_ollama_request(
            prompt,
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∫–æ–¥–∞ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ü–û.",
            temperature=0.4
        )

        state["analysis_result"] = response
        state["conversation_history"].append({
            "role": "analyzer",
            "content": "–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω",
            "timestamp": datetime.now().isoformat()
        })

        print("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return state

    def _generator_logic(self, state: CodeAssistantState) -> CodeAssistantState:
        """–õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""

        prompt = self.generator_prompt.format(
            query=state["query"],
            language=state["language"],
            code_context=state["code_context"]
        )

        response = self._make_ollama_request(
            prompt,
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.",
            temperature=0.7  # –ë–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        )

        state["generated_code"] = response
        state["conversation_history"].append({
            "role": "generator",
            "content": "–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω",
            "timestamp": datetime.now().isoformat()
        })

        print("üíª –ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        return state

    def _tester_logic(self, state: CodeAssistantState) -> CodeAssistantState:
        """–õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""

        prompt = self.tester_prompt.format(
            query=state["query"],
            code_context=state["code_context"],
            language=state["language"]
        )

        response = self._make_ollama_request(
            prompt,
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ü–û.",
            temperature=0.5
        )

        state["test_code"] = response
        state["conversation_history"].append({
            "role": "tester",
            "content": "–¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã",
            "timestamp": datetime.now().isoformat()
        })

        print("üß™ –¢–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
        return state

    def _documenter_logic(self, state: CodeAssistantState) -> CodeAssistantState:
        """–õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""

        prompt = self.documenter_prompt.format(
            query=state["query"],
            code_context=state["code_context"],
            language=state["language"]
        )

        response = self._make_ollama_request(
            prompt,
            "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–¥–∞.",
            temperature=0.5
        )

        state["documentation"] = response
        state["conversation_history"].append({
            "role": "documenter",
            "content": "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞",
            "timestamp": datetime.now().isoformat()
        })

        print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        return state

    def _refactorer_logic(self, state: CodeAssistantState) -> CodeAssistantState:
        """–õ–æ–≥–∏–∫–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞"""

        prompt = self.refactorer_prompt.format(
            query=state["query"],
            code_context=state["code_context"],
            language=state["language"]
        )

        response = self._make_ollama_request(
            prompt,
            "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥—É –∫–æ–¥–∞ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            temperature=0.6
        )

        state["refactored_code"] = response
        state["conversation_history"].append({
            "role": "refactorer", 
            "content": "–ö–æ–¥ –æ—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω",
            "timestamp": datetime.now().isoformat()
        })

        print("üîß –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return state

    def _extract_field(self, text: str, field_name: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–∞"""
        patterns = [
            f"{field_name}:\s*(.*?)(?=\n[A-Z_]+:|$)",
            f"{field_name}\s*=\s*(.*?)(?=\n|$)",
            f"\*\*{field_name}\*\*:\s*(.*?)(?=\n|$)"
        ]

        for pattern in patterns:
            match = re.search(pattern, text, re.IGNORECASE | re.DOTALL)
            if match:
                return match.group(1).strip()

        return ""

    def ask(self, query: str, code_context: str = "", language: str = "python") -> Dict[str, Any]:
        """–ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º"""

        print(f"\nü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {query[:100]}...")

        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = CodeAssistantState(
            query=query,
            code_context=code_context,
            analysis_result="",
            generated_code="",
            test_code="",
            documentation="",
            refactored_code="",
            conversation_history=[],
            current_agent="supervisor",
            task_type="",
            language=language,
            project_files=[],
            error_feedback=""
        )

        try:
            # 1. –°—É–ø–µ—Ä–≤–∏–∑–æ—Ä –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–∞–¥–∞—á—É
            state = self._supervisor_logic(state)

            # 2. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∞–≥–µ–Ω—Ç–æ–º
            agent_name = state["current_agent"]
            if agent_name in self.agents:
                state = self.agents[agent_name](state)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "query": query,
                "task_type": state["task_type"],
                "agent_used": agent_name,
                "analysis": state["analysis_result"],
                "generated_code": state["generated_code"],
                "tests": state["test_code"],
                "documentation": state["documentation"],
                "refactored_code": state["refactored_code"],
                "conversation_history": state["conversation_history"],
                "timestamp": datetime.now().isoformat()
            }

            print("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return result

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return {
                "error": str(e),
                "query": query,
                "timestamp": datetime.now().isoformat()
            }

    def run_interactive(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è"""

        print(f"""
üöÄ Qwen3 Code Assistant –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
   –ú–æ–¥–µ–ª—å: {self.model_name}

üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
   ‚Ä¢ "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞"
   ‚Ä¢ "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
   ‚Ä¢ "–ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ User"
   ‚Ä¢ "–°–æ–∑–¥–∞–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è API"
   ‚Ä¢ "–û—Ç—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏ —ç—Ç–æ—Ç –∫–æ–¥"

üìù –ö–æ–º–∞–Ω–¥—ã:
   /help - —Å–ø—Ä–∞–≤–∫–∞
   /exit - –≤—ã—Ö–æ–¥
   /test - —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        """)

        while True:
            try:
                user_input = input("\nüë§ –í–∞—à –∑–∞–ø—Ä–æ—Å: ").strip()

                if user_input.lower() == '/exit':
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break

                elif user_input.lower() == '/help':
                    print(self._get_help_text())
                    continue

                elif user_input.lower() == '/test':
                    self._run_test_examples()
                    continue

                # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                result = self.ask(user_input)
                self._display_result(result)

            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def _get_help_text(self) -> str:
        return """
üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Qwen3 Code Assistant

üéØ –¢–∏–ø—ã –∑–∞–¥–∞—á:
   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ - –ø–æ–∏—Å–∫ –±–∞–≥–æ–≤, –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π, –∫–ª–∞—Å—Å–æ–≤, –º–æ–¥—É–ª–µ–π –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ - unit —Ç–µ—Å—Ç—ã, integration —Ç–µ—Å—Ç—ã
   ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è - docstrings, README, API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
   ‚Ä¢ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ - —É–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞

üí¨ –ö–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã:
   ‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã: "–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å User —Å –º–µ—Ç–æ–¥–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
   ‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —è–∑—ã–∫: "–ù–∞–ø–∏—à–∏ –Ω–∞ Java —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
   ‚Ä¢ –ü—Ä–∏–≤–æ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç: "–í Django –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–µ–Ω API –¥–ª—è..."

üìñ –ü—Ä–∏–º–µ—Ä—ã:
   ‚Ä¢ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥: [–≤—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥]"
   ‚Ä¢ "–°–æ–∑–¥–∞–π REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
   ‚Ä¢ "–ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ fibonacci"
   ‚Ä¢ "–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–π —ç—Ç–æ—Ç –∫–ª–∞—Å—Å"
        """

    def _run_test_examples(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"""

        examples = [
            {
                "query": "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏",
                "desc": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞"
            },
            {
                "query": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥",
                "code": "def login(user, pwd): return user == 'admin' and pwd == '123'",
                "desc": "–ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            },
            {
                "query": "–°–æ–∑–¥–∞–π —Ç–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–ª–æ–∂–µ–Ω–∏—è",
                "code": "def add(a, b): return a + b",
                "desc": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤"
            }
        ]

        print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤...")

        for i, example in enumerate(examples, 1):
            print(f"\n{'='*50}")
            print(f"–ü—Ä–∏–º–µ—Ä {i}: {example['desc']}")
            print(f"{'='*50}")

            code = example.get('code', '')
            result = self.ask(example['query'], code)

            if 'error' not in result:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {result['task_type']} —á–µ—Ä–µ–∑ {result['agent_used']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")

    def _display_result(self, result: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""

        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            return

        print(f"\nüéØ –ó–∞–¥–∞—á–∞: {result['task_type']}")
        print(f"ü§ñ –ê–≥–µ–Ω—Ç: {result['agent_used']}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        if result.get('analysis'):
            print(f"\nüîç –ê–ù–ê–õ–ò–ó –ö–û–î–ê:")
            print("-" * 40)
            print(result['analysis'][:1000] + ("..." if len(result['analysis']) > 1000 else ""))

        if result.get('generated_code'):
            print(f"\nüíª –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –ö–û–î:")
            print("-" * 40)
            print(result['generated_code'])

        if result.get('tests'):
            print(f"\nüß™ –¢–ï–°–¢–´:")
            print("-" * 40)
            print(result['tests'])

        if result.get('documentation'):
            print(f"\nüìö –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø:")
            print("-" * 40)
            print(result['documentation'])

        if result.get('refactored_code'):
            print(f"\nüîß –û–¢–†–ï–§–ê–ö–¢–û–†–ï–ù–ù–´–ô –ö–û–î:")
            print("-" * 40)
            print(result['refactored_code'])

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""

    print("""
üöÄ QWEN3 CODE ASSISTANT
======================
–ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ—â–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ

–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:
‚úÖ Ollama –∑–∞–ø—É—â–µ–Ω (ollama serve)
‚úÖ –ú–æ–¥–µ–ª—å Qwen3 –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (ollama pull qwen3)
‚úÖ –ú–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ localhost:11434
    """)

    # –ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –º–æ–¥–µ–ª–∏ –Ω–∞ –≤–∞—à–µ
    model_name = input("ü§ñ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'qwen3'): ").strip() or "qwen3"

    try:
        assistant = Qwen3CodeAssistant(model_name=model_name)
        assistant.run_interactive()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("‚Ä¢ –ó–∞–ø—É—â–µ–Ω –ª–∏ Ollama (ollama serve)")
        print("‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å (ollama list)")
        print("‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –∏–º—è –º–æ–¥–µ–ª–∏")

if __name__ == "__main__":
    main()
